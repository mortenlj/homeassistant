#!/usr/bin/env bash
set -e

from="https://mortenlj@bitbucket.org/mortenlj/homeassistant"
to="/tmp/babushka-my-machines"
me=$(whoami)

sudo=$([ ${me} != root ] && echo 'sudo' || echo '')

interactive=$([ -t 0 ] && echo 'true' || echo 'false')

true_with() { echo -e "\n$1"; true; }
false_with() { echo -e "\n$1"; false; }

has() {
  type "$1" >/dev/null 2>&1
}

pkg_manager() {
  managers="aptitude apt-get brew pacman yum pkg_add"
  for manager in ${managers}; do
    has "$manager" && echo "$manager" && exit
  done
}

update_manager() {
  case $(pkg_manager) in
    apt-get) ${sudo} apt-get update -qqy ;;
    aptitude) ${sudo} aptitude -y update ;;
    brew) brew update ;;
    pacman) ${sudo} pacman --sync --refresh ;;
    yum) true ;;
    pkg_add) true ;;
    *)
  esac
}

install_pkgs() {
  case $(pkg_manager) in
    apt-get) ${sudo} apt-get install -qqy $1 ;;
    aptitude) ${sudo} aptitude -y install $1 ;;
    brew) brew install $1 ;;
    pacman) ${sudo} pacman --sync --noconfirm --noprogressbar $1 ;;
    yum) ${sudo} yum -y install $1 ;;
    pkg_add) ${sudo} pkg_add -r $1 ;;
    *)
  esac
}

logo() {
cat <<"LOGO"

<some logo here - babushka-my-machines>

LOGO
}

can_install() {
  pkg=$1

  if ! has $(pkg_manager); then
    false_with "Sorry, you don't have $pkg installed, and I couldn't find a package manager I recognise."
  else
    true
  fi
}

check() {
  if ! has 'hg'; then
    can_install 'mercurial'
  elif ! has 'curl'; then
    can_install 'curl'
  elif ! has 'git'; then
    can_install 'git'
  elif ! has 'sudo'; then
    can_install 'sudo'
  else
    true
  fi
}

welcome() {
  echo ""
  echo "Welcome to my machine!"
  echo ""
  echo "Now we will just clone our mercurial project and setup your machine"
  echo "so you can start developing."
  echo "You will be asked for your password several times. We swear it"
  echo "wont be used for anything bad."
  echo ""

  if has 'hg'; then
    echo "- You already have $(hg version | head -n1)."
  else
    echo "- You don't have mercurial installed, so we'll install it (using $(pkg_manager))."
  fi

  if has 'git'; then
    echo "- You already have $(git --version | head -n1)."
  else
    echo "- You don't have git installed, so we'll install it (using $(pkg_manager))."
  fi

  if has 'curl'; then
    echo "- You already have curl."
  else
    echo "- You don't have curl installed, so we'll install it (using $(pkg_manager))."
  fi

  if has 'sudo'; then
    echo "- You already have sudo."
  else
    echo "- You don't have sudo installed, so we'll install it (using $(pkg_manager))."
  fi

  echo ""
  confirmed=""

  if [ "$interactive" = 'false' ]; then
    true
  else
    if [ -n "$ZSH_VERSION" ]; then
      vared -p "Sound good? [y/N] " confirmed
    elif [ -n "$BASH_VERSION" ]; then
      read -e -p "Sound good? [y/N] " confirmed
    else
      read -p "Sound good? [y/N] " confirmed
    fi

    case $confirmed in
      "y"*) true;;
      "Y"*) true;;
      *)    false;;
    esac
  fi
}

install_pkgs_if_required() {
  if has 'hg' && has 'curl' && has 'git' && has 'sudo'; then
    true # already installed
  else
    pkgs="$(has 'hg' || echo 'mercurial') $(has 'curl' || echo 'curl') $(has 'git' || echo 'git') $(has 'sudo' || echo 'sudo')"
    echo ""
    echo "First we need to install $(echo $pkgs | sed 's/ / \& /g') (via $(pkg_manager))."

    update_manager
    install_pkgs "$pkgs"

    if ! has 'hg' || ! has 'curl' || ! has 'git' || ! has 'sudo'; then
      false_with "Argh, the install failed."
    else
      echo ""
      echo "- $(hg version | head -n1) is present at $(which hg)."
      echo "- curl is present at $(which curl)."
      echo "- $(git --version | head -n1) is present at $(which git)."
      echo "- sudo is present at $(which sudo)."
      true
    fi
  fi
}

clone_() {
  if [ -d $to ]; then
    echo ""
    echo "Looks like the repo is already in place at $to"
    echo ""
  else
    echo ""
    echo "Then we will clone our mercurial project."
    echo ""
    hg clone $from $to
  fi
}

on_clone_success() {
  echo ""
  echo "babushka-my-machines is now cloned to $to."
  echo ""
  echo "Now we will setup your machine so it is ready for use."
  echo ""
  true
}

on_clone_failure() {
  echo ""
  echo "Something went wrong during hg clone of the project."
  echo ""
  false
}

setup() {
  $to/setup
}

do_bootstrap() {
  install_pkgs_if_required &&
  clone_ &&
  on_clone_success || on_clone_failure &&
  setup
}

main() {
  logo
  if check; then
    if welcome; then
      do_bootstrap
    else
      echo ""
      echo "OK, maybe another time. :)"
    fi
  fi
}
main
